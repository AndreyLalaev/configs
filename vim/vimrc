set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'tomasiser/vim-code-dark'

Plugin 'majutsushi/tagbar'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'scrooloose/nerdcommenter'
Plugin 'godlygeek/tabular'

Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'habamax/vim-rst'

" FOR FUNCTION HIGHLIGHT https://vimawesome.com/plugin/vim-cpp-enhanced-highlight
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'kergoth/vim-bitbake.git'

Plugin 'joe-skb7/cscope-maps'

Plugin 'tpope/vim-obsession'

Plugin 'rust-lang/rust.vim'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'rhysd/vim-clang-format'

call vundle#end()            " required
filetype plugin indent on    " required

"
" Put your non-Plugin stuff after this line

syntax on
set scrolloff=1
colorscheme codedark
set notermguicolors

set enc=utf-8
set ls=2
set mouse=a
if !has('nvim')
    set ttymouse=xterm2
endif
set splitbelow
set number
" disable folding
set nofoldenable

" Tab settings
set tabstop=8
set softtabstop=8
set shiftwidth=8
set expandtab
set colorcolumn=80

set is hlsearch
set cursorline

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set clipboard=unnamed
  else
    set clipboard=unnamedplus
  endif
endif

set wildmenu
set wildmode=longest:full,full

" set up different cursor for insert, replace and normal modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Short keys
nmap <F8> :TagbarToggle<CR>
map <F5> i -- Andrew Lalaev <andrey.lalaev@gmail.com> <esc>:r !date -R <CR>i<Backspace> <esc>

set omnifunc=syntaxcomplete#Complete
:autocmd InsertEnter,InsertLeave * set cul!

set pumheight=7
set completeopt-=preview

let g:NERDSpaceDelims=1
let g:NERDCompactSexyComs=1
let g:NERDCustomDelimiters={ 'c': { 'left': '/**','right': '*/' } }

let g:netrw_winsize = 30

let g:rustfmt_autosave = 1
let g:ycm_rust_toolchain_root = $HOME . '/.cargo/'
let g:ycm_clangd_binary_path = "/usr/bin/clangd"

let g:clang_format#auto_filetypes = ["cpp"]

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:clang_format#detect_style_file = 1
let g:clang_format#auto_format = 1

let g:cmake_build_dir_location = "build/"
" Turn off clang-tidy if there is no config
if !filereadable(".clang-tidy")
    let g:ycm_clangd_args = ["--clang-tidy=0"]
endif

" Disable hover by default, but can be toggled with leader + D
let g:ycm_auto_hover = ''
nmap <leader>D <plug>(YCMHover)
augroup MyYCMCustom
        autocmd!
        autocmd FileType c,cpp let b:ycm_hover = {
                \ 'command': 'GetDoc',
                \ 'syntax': &filetype
                \ }
        autocmd FileType rust let b:ycm_hover = {
                \ 'command': 'GetDoc',
                \ 'syntax': &filetype
                \ }
augroup END


"auto close {
function! s:CloseBracket()
    let line = getline('.')
    if line =~# '^\s*\(struct\|class\|enum\) '
        "return "{\<Enter>}\<Esc>O"
        return "{\<Enter>};\<Esc>O"
    elseif searchpair('(', '', ')', 'bmn', '', line('.'))
        " Probably inside a function call. Close it off.
        return "{\<Enter>});\<Esc>O"
    else
        return "{\<Enter>}\<Esc>O"
    endif
endfunction
inoremap <expr> {<Enter> <SID>CloseBracket()

nnoremap <silent> <Esc><Esc> :noh<CR> :call clearmatches()<CR>
let g:rst_syntax_code_list = {
    \ 'vim': ['vim'],
    \ 'java': ['java'],
    \ 'cpp': ['cpp', 'c++'],
    \ 'c': ['c', 'c'],
    \ 'lisp': ['lisp'],
    \ 'php': ['php'],
    \ 'python': ['python'],
    \ 'perl': ['perl'],
    \ 'sh': ['sh'],
    \ }
